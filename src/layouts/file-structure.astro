---
import { getCollection } from "astro:content";
import { sumTags } from "@content/sum-tags";
import { slugToUrl, urlToSlug } from "@content/slug-to-url";

interface Props {
  currentTag?: string;
  currentPost?: string;
}

const { currentTag, currentPost } = Astro.props;

const content = await getCollection("all");
const tags = content.reduce(sumTags, {});
const sluggifiedTag = currentTag ? urlToSlug(currentTag) : "";

const mostRecentPosts = content
  .toSorted(
    (a, b) => b.data.creationDate.getTime() - a.data.creationDate.getTime()
  )
  .slice(0, 2);

const mostRecentUpdate = content
  .filter((post) => post.data.updateDate)
  .toSorted(
    (a, b) => b.data.updateDate!.getTime() - a.data.updateDate!.getTime()
  )
  .slice(0, 2);

const currentPosts = content
  .filter((post) => post.data.tags.includes(sluggifiedTag))
  .map((post) => ({
    fileName: post.slug,
    ...post.data,
  }));

//todo: sort
---

<body>
  <nav>
    <h1>Content</h1>
    <details>
      <summary>most recent</summary>
      <ul>
        {
          mostRecentPosts.map((recentPost) => (
            <li>
              <a href={`/${recentPost.data.tags[0]}/`}>
                {recentPost.data.title}
              </a>
            </li>
          ))
        }
      </ul>
    </details>
    {
      mostRecentUpdate.length > 0 && (
        <details>
          <summary>recently updated</summary>
          <ul>
            {mostRecentUpdate.map((recentPost) => (
              <li>
                <a href={`/${recentPost.data.tags[0]}/`}>
                  {recentPost.data.title}
                </a>
              </li>
            ))}
          </ul>
        </details>
      )
    }
    <details open>
      <summary>tags</summary>
      <ul>
        {
          Object.entries(tags)
            .toSorted((a, b) => b[1] - a[1])
            .map(([tagName, amount]) => (
              <li data-value={tagName} data-amount={amount}>
                <a
                  href={`/${slugToUrl(tagName)}`}
                  aria-current={tagName === currentTag}
                >
                  {tagName} - {amount}
                </a>
              </li>
            ))
        }
      </ul>
    </details>
  </nav>
  {
    currentPosts.length > 0 && (
      <nav aria-label="secondary">
        <ul>
          {currentPosts.map((entry) => (
            <li>
              <a
                href={`/${sluggifiedTag}/${entry.fileName}`}
                aria-current={entry.fileName === currentPost}
              >
                <h3>{entry.title}</h3>
                <p>{entry.description}</p>
              </a>
            </li>
          ))}
        </ul>
      </nav>
    )
  }

  <main>
    <slot />
  </main>
</body>

<style>
  nav {
    padding: 2em;
    border-inline-end: 2px solid black;
  }

  main {
    padding: 2em;
  }

  body {
    display: grid;
    grid-template-columns: max-content minmax(12em, 1fr) 4fr;
    grid-auto-flow: column;
  }
</style>
