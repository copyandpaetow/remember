---
import { getCollection } from "astro:content";
import { sumTags } from "@content/sum-tags";
import { tagToUrl, removeFolderFromSlug } from "@content/transform-tags";
import type { Entry } from "@content/types";

interface Props {
  currentTag?: string;
  currentSlug?: string;
}

const { currentTag = "", currentSlug } = Astro.props;

const content = await getCollection("articles");
const entriesPerTag = content.reduce(sumTags, {});

const mostRecentPosts = content
  .toSorted(
    (a, b) => b.data.creationDate.getTime() - a.data.creationDate.getTime()
  )
  .slice(0, 2);

const mostRecentUpdate = content
  .filter((post) => post.data.updateDate)
  .toSorted(
    (a, b) => b.data.updateDate!.getTime() - a.data.updateDate!.getTime()
  )
  .slice(0, 2);

// const test = {
//   "code snippets": 2,
//   frontend: {
//     components: 2,
//     atoms: 1,
//   },
// };

// type Folders = Record<string, number>;

// const withFolders: Folders | Record<string, Folders> = {};

// const addToFolder = (entry: [string, Entry[]]) => {
//   const [tagName, entries] = entry;
//   const splitFoldersFromTagName = tagName.split("/");
//   const nameWithoutFolder = splitFoldersFromTagName.at(-1)!;

//   if (splitFoldersFromTagName.length === 1) {
//     withFolders[tagName] = entries.length;
//     return;
//   }
//   splitFoldersFromTagName.slice(0, -1).map((folderName) => {
//     withFolders[folderName] = withFolders[folderName] ?? {};
//     withFolders[folderName][nameWithoutFolder] = entries.length;
//   });
// };

// Object.entries(entriesPerTag).forEach(addToFolder);

// console.log(withFolders);

//todo: sort
---

<body>
  <nav>
    <h1>Content</h1>
    <details>
      <summary>most recent</summary>
      <ul>
        {
          mostRecentPosts.map((recentPost) => (
            <li>
              <a href={`/${recentPost.data.tags[0]}/`}>
                {recentPost.data.title}
              </a>
            </li>
          ))
        }
      </ul>
    </details>
    {
      mostRecentUpdate.length > 0 && (
        <details>
          <summary>recently updated</summary>
          <ul>
            {mostRecentUpdate.map((recentPost) => (
              <li>
                <a href={`/${recentPost.data.tags[0]}/`}>
                  {recentPost.data.title}
                </a>
              </li>
            ))}
          </ul>
        </details>
      )
    }
    <details open>
      <summary>tags</summary>
      <ul>
        {
          Object.entries(entriesPerTag)
            .toSorted((a, b) => b[1].length - a[1].length)
            .map(([tagName, entries]) => (
              <li data-value={tagName} data-amount={entries.length}>
                <a
                  href={`/${tagToUrl(tagName)}`}
                  aria-current={tagName === currentTag}
                >
                  {tagName} - {entries.length}
                </a>
              </li>
            ))
        }
      </ul>
    </details>
  </nav>
  {
    entriesPerTag[currentTag]?.length > 0 && (
      <nav aria-label="secondary">
        <ul>
          {entriesPerTag[currentTag].map((entry) => (
            <li>
              <a
                href={`/${tagToUrl(currentTag)}/${removeFolderFromSlug(entry.slug)}`}
                aria-current={entry.slug === currentSlug}
              >
                <h3>{entry.data.title}</h3>
                <p>{entry.data.description}</p>
              </a>
            </li>
          ))}
        </ul>
      </nav>
    )
  }

  <main>
    <slot />
  </main>
</body>

<style>
  nav {
    padding: 2em;
    border-inline-end: 2px solid black;
  }

  main {
    padding: 2em;
  }

  body {
    display: grid;
    grid-template-columns: max-content minmax(12em, 1fr) 4fr;
    grid-auto-flow: column;
  }
</style>
