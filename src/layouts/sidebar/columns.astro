---
import { sumTags } from "@content/transform-data/sum-tags";
import {
  removeNestedFolder,
  tagToUrl,
} from "@content/transform-data/transform-tags";
import type { Folders } from "@content/types";
import { getCollection } from "astro:content";
import NestedFolders from "./nested-folders.astro";

interface Props {
  currentTag?: string;
  currentSlug?: string;
}

const options = {
  year: "numeric",
  month: "2-digit",
  day: "numeric",
} satisfies Intl.DateTimeFormatOptions;

const { currentTag = "", currentSlug } = Astro.props;

const content = await getCollection("articles");
const entriesPerTag = content.reduce(sumTags, {});

const allTags = new Set(
  content
    .flatMap((entry) => entry.data.tags)
    .map(removeNestedFolder)
    .map(tagToUrl)
);

const cssFilterLogic = `
  ${[...allTags]
    .map(
      (tag) => `
      :has(#${tag}:checked) #search-results li:not([data-tags~=${tag}]) {
        display: none;
      }
    `
    )
    .join("")}
`;

const folders = Object.entries(entriesPerTag).reduce(
  (accumulator, [tag, entries]) => {
    if (!tag.includes("/")) {
      accumulator[tag] = entries;
      return accumulator;
    }

    let reference = accumulator;
    tag.split("/").forEach((folder, index, array) => {
      if (index === array.length - 1) {
        reference[folder] = entries;
        return;
      }

      reference[folder] ??= {};
      //@ts-expect-error
      reference = reference[folder];
    });
    return accumulator;
  },
  {} as Folders | Record<string, Folders>
);

//todo: we need to find an alternative to the tag/post structure as it is confusing that several different tags lead to the same post
//=> one option would be to replace the links of the first column with checkboxes (as filters), give the articles in the list of the second column a data-variable="tag1 tag2..."
//and use the has selector to select them. With JS we could set the checkboxes etc onload/onsearch

//todo: make columns responsive
//todo: the sidebar needs to be collapsible as well on interaction. Maybe even with a param to facilitate a better reading experience
//todo: we might also think about an inpage nav (maybe sticky on top / bottom where it scrolls horizontally)? We cant fit another column
// => Alternatively we can add another column but need to scroll the page so that the first column is scroll out of the viewport
//todo: recreate bears reference functionality => [^1] is displayed as a <sup>1<sup> and on click it scrolls the page to the bottom
//where the content block with another [^1] is, while also highlighting it on yellow briefly
//todo: add a 404 page and a empty results component
//todo: would be nice to have the /latest redirecting to the latest article
---

<script>
  const form = document.getElementById("search-form") as HTMLFormElement;
  const searchResults = document.getElementById(
    "search-results"
  ) as HTMLUListElement;

  const filterContent = (searchPhrase: string) => {
    if (!searchPhrase.trim()) {
      return;
    }

    const splitSearchPhrase = searchPhrase
      .split(" ")
      .map((searchWord) => searchWord.toLowerCase());

    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.set("q", searchPhrase);

    const newUrl = `${url.pathname}?${params.toString()}`;
    window.history.pushState({}, "", newUrl);

    (Array.from(searchResults.children) as HTMLElement[]).forEach((child) => {
      const anchor = child.querySelector("a");
      const words =
        anchor?.innerText
          .split("\n")
          .filter(Boolean)
          .flatMap((line) => line.split(" ")) ?? [];

      const matches = words.some((word) =>
        splitSearchPhrase.includes(word.toLowerCase())
      );

      requestAnimationFrame(() => {
        matches
          ? child.removeAttribute("hidden")
          : child.setAttribute("hidden", "");
      });
    });
  };

  const url = new URL(window.location.href);
  const params = new URLSearchParams(url.search);

  if (params.has("q")) {
    const searchPhrase = params.get("q") as string;
    (form.querySelector("input[name='q']") as HTMLInputElement).value =
      searchPhrase;
    filterContent(searchPhrase);
  }

  form?.addEventListener("submit", (event) => {
    event.preventDefault();
    const searchPhrase = String(new FormData(form).get("q") ?? "");
    filterContent(searchPhrase);
    console.log(searchPhrase);
  });
</script>

<body>
  <nav class="first-column">
    <h1>Content</h1>
    <a href="/">home</a>

    <NestedFolders
      folders={folders}
      currentTag={currentTag}
      level={0}
      name="tags"
    />
  </nav>
  {
    (
      <nav aria-label="secondary" class="second-column">
        <search>
          <form id="search-form" method="GET" action="">
            <label for="content">Filter content</label>
            <input type="search" id="content" name="q" />
            <button type="submit">Search</button>
            <select name="filter" id="filter">
              <option>date</option>
              <option selected>abc</option>
            </select>
          </form>
        </search>
        <ul id="search-results">
          {content.map((entry) => (
            <li
              data-tags={entry.data.tags
                .map(removeNestedFolder)
                .map(tagToUrl)
                .join(" ")}
            >
              <a
                href={`/${removeNestedFolder(entry.slug)}`}
                aria-current={entry.slug === currentSlug}
              >
                <h3>{entry.data.title}</h3>
                <p>
                  {(
                    entry.data.updateDate ?? entry.data.creationDate
                  ).toLocaleDateString("de-DE", options)}
                </p>
                <p>{entry.data.description}</p>
              </a>
            </li>
          ))}
        </ul>
      </nav>
    )
  }

  <main tabindex={Astro.slots.has("default") ? 0 : -1}>
    <slot> <p>so empty</p></slot>
  </main>
</body>

<style set:html={cssFilterLogic}></style>

<style>
  nav {
    padding: 2em;
    border-inline-end: 2px solid black;
  }

  main {
    padding: 2em;
  }

  body {
    display: grid;
    grid-template-columns: max-content minmax(12em, 1fr) 4fr;
    grid-auto-flow: column;
  }
</style>
