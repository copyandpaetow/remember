---
import { getCollection, getEntry } from "astro:content";
import Layout from "@layouts/layout.astro";
import ColumnStructure from "@layouts/sidebar/columns.astro";
import WebComponentsLoader from "@layouts/web-component-loader.astro";
import { sumTags } from "@content/transform-data/sum-tags";
import {
  tagToUrl,
  removeNestedFolder,
} from "@content/transform-data/transform-tags";

export async function getStaticPaths() {
  const content = await getCollection("articles");
  const entriesPerTag = content.reduce(sumTags, {});

  return Object.entries(entriesPerTag).flatMap(([tag, entries]) =>
    entries.map((post) => ({
      params: {
        tag: tagToUrl(removeNestedFolder(tag)),
        post: removeNestedFolder(post.slug),
      },
      props: {
        post,
        tag,
      },
    }))
  );
}
const { post, tag } = Astro.props;
const { Content } = await post.render();

const { title, relatedContent } = post.data;
const relatedArticles = await Promise.all(
  (relatedContent ?? []).map(({ collection, slug }) =>
    getEntry(collection, slug)
  )
);
---

<Layout title={title}>
  <ColumnStructure currentTag={tag} currentSlug={post.slug}>
    <header>
      <h1>{title}</h1>
      <p>related content:</p>
      <ul>
        {
          relatedArticles.map((entry) => (
            <li>
              <a
                href={`/${tagToUrl(entry.data.tags.includes(tag) ? removeNestedFolder(tag) : removeNestedFolder(entry.data.tags[0]))}/${removeNestedFolder(entry.slug)}`}
              >
                {entry.data.title}
              </a>
            </li>
          ))
        }
      </ul>
    </header>

    <WebComponentsLoader>
      <Content />
    </WebComponentsLoader>
  </ColumnStructure>
</Layout>
